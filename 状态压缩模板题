#include <bits/stdc++.h>
using namespace std;
using ll = long long;

const ll INF = 1e18;

template<typename T>
T chmin(T a, T b) {
    return a > b ? b : a;
}

bool solve() {
    int n, m;
    if (!(cin >> n >> m)) {
        return false;
    }

    vector<ll> pow(n + 1);
    pow[0] = 1;
    for (int i = 1; i <= n; ++i) {
        pow[i] = pow[i - 1] * 3;
    }
    ll pow_n = pow[n];

    map<int, map<int, int>> mp;
    for (int i = 0; i < m; ++i) {
        int u, v, w;
        cin >> u >> v >> w;

        if (mp[u].count(v)) {
            mp[u][v] = mp[v][u] = chmin(mp[u][v], w);
        } else {
            mp[u][v] = mp[v][u] = w;
        }
    }

    vector<vector<ll>> f(n + 1, vector<ll>(pow_n, INF));
    for (int i = 1; i <= n; ++i) {
        ll state = pow[i - 1];
        f[i][state] = 0;
    }

    ll owo = INF;
    for (ll mask = 0; mask < pow_n; ++mask) {
        vector<int> a(n);
        ll temp = mask;
        for (int idx = 0; idx < n; ++idx) {
            a[idx] = temp % 3;
            temp /= 3;
        }

        int sz = count(a.begin(), a.end(), 0);
        int kth = -1;
        if (sz == 1) {
            kth = find(a.begin(), a.end(), 0) - a.begin();
        }

        for (int j = 1; j <= n; ++j) {
            if (f[j][mask] == INF) continue;
            for (auto [k, v] : mp[j]) {
                if (a[k - 1] <= 1) {
                    ll new_mask = mask + pow[k - 1];
                    f[k][new_mask] = chmin(f[k][new_mask], f[j][mask] + v);
                    if (sz == 0 || (sz == 1 && k - 1 == kth)) {
                        owo = chmin(owo, f[k][new_mask]);
                    }
                }
            }
        }
    }

    cout << (owo == INF ? -1 : owo) << endl;
    return true;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    while (solve()){
        
    }

    return 0;
}
